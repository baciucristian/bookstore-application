<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        3Qf20kv/D73ZOk+ulOsXAAAAAElFTkSuQmCC
</value>
  </data>
</root>